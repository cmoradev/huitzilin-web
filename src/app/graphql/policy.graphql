fragment PolicyParts on Policy {
  id
  name
  actions {
    id
    route
    actions
    resources
  }
}

mutation createOnePolicy($policy: CreatePolicy!) {
  createOnePolicy(input: { policy: $policy }) {
    ...PolicyParts
  }
}

query getPoliciesPage(
  $offset: Int = 0
  $limit: Int = 10
  $filter: PolicyFilter = {}
) {
  policies(
    paging: { limit: $limit, offset: $offset }
    sorting: [{ field: createdAt, direction: DESC }]
    filter: $filter
  ) {
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
    }
    nodes {
      ...PolicyParts
    }
  }
}

mutation updateOnePolicy($id: ID!, $update: UpdatePolicy!) {
  updateOnePolicy(input: { id: $id, update: $update }) {
    ...PolicyParts
  }
}

mutation deleteOnePolicy($id: ID!) {
  deleteOnePolicy(input: { id: $id }) {
    id
  }
}
